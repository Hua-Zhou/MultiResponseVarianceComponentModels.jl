var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [MultiResponseVarianceComponentModels]","category":"page"},{"location":"api/#MultiResponseVarianceComponentModels.fisher_B!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.fisher_B!","text":"fisher_B!(model::MultiResponseVarianceComponentModel)\n\nCompute the sampling variance-covariance of regression coefficients model.B,  assuming inverse of covariance matrix model.Ω is available at model.storage_nd_nd.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.fisher_Σ!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.fisher_Σ!","text":"fisher_Σ!(model::MultiResponseVarianceComponentModel)\n\nCompute the sampling variance-covariance of variance component estimates model.Σ,  assuming inverse of covariance matrix model.Ω is available at model.storage_nd_nd.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.fit!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.fit!","text":"fit!(model::MultiResponseVarianceComponentModel)\n\nFit a multivariate response variance component model by an MM or EM algorithm.\n\nPositional arguments\n\nmodel            : a MultiResponseVarianceComponentModel instance.  \n\nKeyword arguments\n\nmaxiter::Integer : maximum number of iterations. Default is 1000.\nreltol::Real     : relative tolerance for convergence. Default is 1e-6.\nverbose::Bool    : display algorithmic information. Default is false.\ninit::Symbol     : initialization strategy. :default initialize by least squares.   :user uses user supplied value at model.B and model.Σ.\nalgo::Symbol     : optimization algorithm. :MM (default) or EM.\nlog::Bool        : record iterate history or not. Defaut is false.\nreml::Bool       : REML instead of ML estimation. Default is false.\nse::Bool         : calculate standard errors. Default is true.\n\nOutput\n\nhistory          : iterate history.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.h2-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.h2","text":"h2(model::MultiResponseVarianceComponentModel)\n\nCalculate heritability estimates and their standard errors, assuming that all variance components  capture genetic effects except the last term. Also returns total heritability and its standard error from sum of individual contributions.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.kron_axpy!-Union{Tuple{T}, Tuple{AbstractVecOrMat{T}, AbstractVecOrMat{T}, AbstractVecOrMat{T}}} where T<:Real","page":"API","title":"MultiResponseVarianceComponentModels.kron_axpy!","text":"kron_axpy!(A, X, Y)\n\nOverwrite Y with A ⊗ X + Y. Same as Y += kron(A, X), but more memory efficient.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.kron_reduction!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, AbstractMatrix{T}}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, AbstractMatrix{T}, Bool}} where T<:Real","page":"API","title":"MultiResponseVarianceComponentModels.kron_reduction!","text":"kron_reduction!(A, B, C; sym = false)\n\nOverwrite C with the derivative of tr(A' (X ⊗ B)) wrt X. C[i, j] = dot(Aij, B), where Aij is the (i , j) block of A. sym = true  indicates A and B are symmetric.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.loglikelihood!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.loglikelihood!","text":"loglikelihood!(model::MultiResponseVarianceComponentModel)\n\nOverwrite model.storage_nd_nd by inverse of the covariance  matrix model.Ω, overwrite model.storage_nd by U' \\ vec(model.R), and  return the log-likelihood. This function assumes model.Ω and model.R are  already updated according to model.Σ and model.B.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.lrt-Tuple{MultiResponseVarianceComponentModel, MultiResponseVarianceComponentModel}","page":"API","title":"MultiResponseVarianceComponentModels.lrt","text":"lrt(model1::MultiResponseVarianceComponentModel, model0::MultiResponseVarianceComponentModel)\n\nPerform a variation of the likelihood ratio test for univariate variance components models as in  Molenberghs and Verbeke 2007 with model1 and model0 being the full and nested models, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.rg-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.rg","text":"rg(model::MultiResponseVarianceComponentModel)\n\nCalculate genetic/residual correlation estimates and their standard errors.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_B!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_B!","text":"update_B!(model::MultiResponseVarianceComponentModel)\n\nUpdate the regression coefficients model.B, assuming inverse of  covariance matrix model.Ω is available at model.storage_nd_nd.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_Γk!-Union{Tuple{T}, Tuple{MultiResponseVarianceComponentModel{T}, Integer}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_Γk!","text":"update_Γk!(model, k)\n\nUpdate the parameters model.Γ[k] and model.Ψ[:,k] assuming a diagonal plus low rank structure for model.Σ[k]. Assumes covariance matrix model.Ω is  available at model.storage_nd_nd and model.Ω⁻¹R precomputed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_Σ!-Union{Tuple{MultiResponseVarianceComponentModel{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_Σ!","text":"update_Σ!(model::MultiResponseVarianceComponentModel)\n\nUpdate the variance component parameters model.Σ, assuming inverse of  covariance matrix model.Ω is available at model.storage_nd_nd.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_Σk!-Union{Tuple{T}, Tuple{MultiResponseVarianceComponentModel{T}, Integer, Integer}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_Σk!","text":"update_Σk!(model, k, rk)\n\nUpdate the model.Σ[k] assuming it has rank rk < d, assuming inverse of  covariance matrix model.Ω is available at model.storage_nd_nd and  model.Ω⁻¹R precomputed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_Σk!-Union{Tuple{T}, Tuple{MultiResponseVarianceComponentModel{T}, Integer, Val{:EM}}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_Σk!","text":"update_Σk!(model::MultiResponseVarianceComponentModel, k, Val(:EM))\n\nEM update the model.Σ[k] assuming it has full rank d, inverse of  covariance matrix model.Ω is available at model.storage_nd_nd, and  model.Ω⁻¹R precomputed.\n\n\n\n\n\n","category":"method"},{"location":"api/#MultiResponseVarianceComponentModels.update_Σk!-Union{Tuple{T}, Tuple{MultiResponseVarianceComponentModel{T}, Integer, Val{:MM}}} where T<:Union{Float32, Float64}","page":"API","title":"MultiResponseVarianceComponentModels.update_Σk!","text":"update_Σk!(model::MultiResponseVarianceComponentModel, k, Val(:MM))\n\nMM update the model.Σ[k] assuming it has full rank d, inverse of  covariance matrix model.Ω is available at model.storage_nd_nd, and  model.Ω⁻¹R precomputed.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Simulate-data","page":"Examples","title":"Simulate data","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MultiResponseVarianceComponentModels, LinearAlgebra, Random\nRandom.seed!(6789)\nn = 1_000;  # n of observations\nd = 4;      # n of responses\np = 10;     # n of covariates\nm = 5;      # n of variance components\nX = rand(n, p);\nB = rand(p, d)\nV = [zeros(n, n) for _ in 1:m]; # kernel matrices\nΣ = [zeros(d, d) for _ in 1:m]; # variance components\nfor i in 1:m\n    Vi = randn(n, n)\n    copy!(V[i], Vi' * Vi)\n    Σi = randn(d, d)\n    copy!(Σ[i], Σi' * Σi)\nend\nΩ = zeros(n * d, n * d); # overall nd-by-nd covariance matrix Ω\nfor i = 1:m\n    Ω += kron(Σ[i], V[i])\nend\nΩchol = cholesky(Ω);\nY = X * B + reshape(Ωchol.L * randn(n * d), n, d)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nIn the case of heritability and genetic correlation analyses, one can use classic genetic relationship matrices (GRMs) for boldsymbolV_i's, which in turn can be constructed using SnpArrays.jl.","category":"page"},{"location":"examples/#Maximum-likelihood-estimation","page":"Examples","title":"Maximum likelihood estimation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = MultiResponseVarianceComponentModel(Y, X, V)\n@timev fit!(model, verbose = true)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For residual maximum likelihood estimation, you can instead type:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"@timev fit!(model, reml = true, verbose = true)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then variance components and mean effects estimates can be accessed through","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model.Σ\nmodel.B\nhcat(vec(B), vec(model.B))\nreduce(hcat, [hcat(vec(Σ[i]), vec(model.Σ[i])) for i in 1:m])","category":"page"},{"location":"examples/#Standard-errors","page":"Examples","title":"Standard errors","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Sampling variance and covariance of these estimates are","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model.Σcov\nmodel.Bcov","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Corresponding standard error of these estimates are","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sqrt.(diag(model.Σcov))\nsqrt.(diag(model.Bcov))","category":"page"},{"location":"advanced/#Advanced-details","page":"Advanced details","title":"Advanced details","text":"","category":"section"},{"location":"advanced/#Estimation","page":"Advanced details","title":"Estimation","text":"","category":"section"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"For the MM algorithm, the updates in each iteration are","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"beginaligned\ntextvec boldsymbolB^(t) = (boldsymbolI_d otimes boldsymbolX^T) boldsymbolOmega^-(t) (boldsymbolI_d otimes boldsymbolX)^-1 (boldsymbolI_d otimes boldsymbolX^T) boldsymbolOmega^-(t) textvec boldsymbolY \nboldsymbolGamma_i^(t + 1) = boldsymbolL_i^-(t)TboldsymbolL_i^(t)T(boldsymbolGamma_i^(t)boldsymbolR^(t)TboldsymbolV_iboldsymbolR^(t)boldsymbolGamma_i^(t))boldsymbolL_i^(t)^12 boldsymbolL_i^-(t)\nendaligned","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"where boldsymbolOmega^(t) = sum_i=1^m boldsymbolGamma_i^(t) otimes boldsymbolV_i and boldsymbolL_i^(t) is the Cholesky factor of (boldsymbolI_d otimes boldsymbol1_n)^T (boldsymbol1_d boldsymbol1_d^T otimes boldsymbolV_i) odot boldsymbolOmega^-(t) (boldsymbolI_d otimes boldsymbol1_n), while boldsymbolR^(t) is the n times d matrix such that textvec boldsymbolR^(t) = boldsymbolOmega^-(t) textvec(boldsymbolY - boldsymbolX boldsymbolB^(t)).","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"For the EM algorithm, the updates in each iteration are","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"beginaligned\ntextvec boldsymbolB^(t) = (boldsymbolI_d otimes boldsymbolX^T) boldsymbolOmega^-(t) (boldsymbolI_d otimes boldsymbolX)^-1 (boldsymbolI_d otimes boldsymbolX^T) boldsymbolOmega^-(t) textvec boldsymbolY \nboldsymbolGamma_i^(t + 1) = frac1r_i boldsymbolGamma_i^(t)  boldsymbolR^(t)T boldsymbolV_i boldsymbolR^(t) - (boldsymbolI_d otimes boldsymbol1_n)^T (boldsymbol1_d boldsymbol1_d^T otimes boldsymbolV_i) odot boldsymbolOmega^-(t) (boldsymbolI_d otimes boldsymbol1_n) boldsymbolGamma_i^(t) + boldsymbolGamma_i^(t)\nendaligned","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"where r_i = textrank(boldsymbolV_i). As seen, the updates for mean effects boldsymbolB are the same for these two algorithms.","category":"page"},{"location":"advanced/#Inference","page":"Advanced details","title":"Inference","text":"","category":"section"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"Standard errors for our estimates were calculated using the Fisher information matrix, where","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"beginaligned\ntextE left- fracpartial^2partial(textvec boldsymbolB)^T partial(textvec boldsymbolB) mathcalL right = (boldsymbolI_d otimes boldsymbolX^T) boldsymbolOmega^-1 (boldsymbolI_d otimes boldsymbolX) \ntextE left - fracpartial^2partial (textvech boldsymbolGamma_i)^T partial (textvec boldsymbolB) mathcalL right = boldsymbol0 \ntextE left - fracpartial^2partial (textvech boldsymbolGamma_j)^T partial (textvech boldsymbolGamma_i) mathcalL right = frac12 boldsymbolU_i^T (boldsymbolOmega^-1 otimes boldsymbolOmega^-1) boldsymbolU_j\nendaligned","category":"page"},{"location":"advanced/","page":"Advanced details","title":"Advanced details","text":"and boldsymbolU_i = (boldsymbolI_d otimes boldsymbolK_nd otimes boldsymbolI_n) (boldsymbolI_d^2 otimes textvec boldsymbolV_i) boldsymbolD_d. Here, boldsymbolK_nd is the nd times nd commutation matrix and boldsymbolD_d the d^2 times fracd(d+1)2 duplication matrix. textvech boldsymbolGamma_i creates an fracd(d+1)2 times 1 vector from boldsymbolGamma_i by stacking its lower triangular part.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MultiResponseVarianceComponentModels","category":"page"},{"location":"#MultiResponseVarianceComponentModels","page":"Home","title":"MultiResponseVarianceComponentModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MultiResponseVarianceComponentModels.jl is a package for fitting and testing multivariate response variance components linear mixed models of form","category":"page"},{"location":"","page":"Home","title":"Home","text":"textvec boldsymbolY sim mathcalN(textvec(boldsymbolX boldsymbolB) sum_i=1^m boldsymbolGamma_i otimes boldsymbolV_i)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where boldsymbolY and boldsymbolX are n times d response and  n times p predictor matrices, respectively, and boldsymbolV_1 ldots boldsymbolV_m are m known n times n positive semidefinite matrices. textvec boldsymbolY creates an nd times 1 vector from boldsymbolY by stacking its columns and otimes denotes the Kronecker product. The parameters of the model include p times d mean effects boldsymbolB and d times d variance components (boldsymbolGamma_1 dots boldsymbolGamma_m), which MultiResponseVarianceComponentModels.jl estimates through either minorization-maximization (MM) or expectation–maximization (EM) algorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nMultiResponseVarianceComponentModels.jl is not suitable for biobank-scale data. We recommend using this package for datasets of size up to n cdot d approx 50000. This package also currently works for balanced data without any missing data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use MultiResponseVarianceComponentModels.jl, type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/Hua-Zhou/MultiResponseVarianceComponentModels.jl.git\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation was built using Documenter.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Dates # hide\nprintln(\"Documentation built $(Dates.now()) with Julia $(VERSION)\") # hide","category":"page"}]
}
